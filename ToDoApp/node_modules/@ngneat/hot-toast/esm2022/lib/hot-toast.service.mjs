import { isPlatformServer } from '@angular/common';
import { Inject, Injectable, Optional, PLATFORM_ID } from '@angular/core';
import { isComponent, isTemplateRef } from '@ngneat/overview';
import { defer } from 'rxjs';
import { tap } from 'rxjs/operators';
import { HotToastContainerComponent } from './components/hot-toast-container/hot-toast-container.component';
import { HOT_TOAST_DEFAULT_TIMEOUTS } from './constants';
import { HotToastRef } from './hot-toast-ref';
import { resolveValueOrFunction, ToastConfig, ToastPersistConfig, } from './hot-toast.model';
import * as i0 from "@angular/core";
import * as i1 from "@ngneat/overview";
import * as i2 from "./hot-toast.model";
export class HotToastService {
    constructor(_viewService, platformId, config) {
        this._viewService = _viewService;
        this.platformId = platformId;
        this._isInitialized = false;
        this._defaultConfig = new ToastConfig();
        this._defaultPersistConfig = new ToastPersistConfig();
        if (config) {
            this._defaultConfig = {
                ...this._defaultConfig,
                ...config,
            };
        }
    }
    get defaultConfig() {
        return this._defaultConfig;
    }
    set defaultConfig(config) {
        this._defaultConfig = {
            ...this._defaultConfig,
            ...config,
        };
        if (this._componentRef) {
            this._componentRef.setInput('defaultConfig', this._defaultConfig);
        }
    }
    /**
     * Opens up an hot-toast without any pre-configurations
     *
     * @param message The message to show in the hot-toast.
     * @param [options] Additional configuration options for the hot-toast.
     * @returns
     * @memberof HotToastService
     */
    show(message, options) {
        const toast = this.createToast(message || this._defaultConfig.blank.content, 'blank', {
            ...this._defaultConfig,
            ...options,
        });
        return toast;
    }
    /**
     * Opens up an hot-toast with pre-configurations for error state
     *
     * @param message The message to show in the hot-toast.
     * @param [options] Additional configuration options for the hot-toast.
     * @returns
     * @memberof HotToastService
     */
    error(message, options) {
        const toast = this.createToast(message || this._defaultConfig.error.content, 'error', {
            ...this._defaultConfig,
            ...this._defaultConfig?.error,
            ...options,
        });
        return toast;
    }
    /**
     * Opens up an hot-toast with pre-configurations for success state
     *
     * @param message The message to show in the hot-toast.
     * @param [options] Additional configuration options for the hot-toast.
     * @returns
     * @memberof HotToastService
     */
    success(message, options) {
        const toast = this.createToast(message || this._defaultConfig.success.content, 'success', {
            ...this._defaultConfig,
            ...this._defaultConfig?.success,
            ...options,
        });
        return toast;
    }
    /**
     * Opens up an hot-toast with pre-configurations for loading state
     *
     * @param message The message to show in the hot-toast.
     * @param [options] Additional configuration options for the hot-toast.
     * @returns
     * @memberof HotToastService
     */
    loading(message, options) {
        const toast = this.createToast(message || this._defaultConfig.loading.content, 'loading', {
            ...this._defaultConfig,
            ...this._defaultConfig?.loading,
            ...options,
        });
        return toast;
    }
    /**
     * Opens up an hot-toast with pre-configurations for warning state
     *
     * @param message The message to show in the hot-toast.
     * @param [options] Additional configuration options for the hot-toast.
     * @returns
     * @memberof HotToastService
     */
    warning(message, options) {
        const toast = this.createToast(message || this._defaultConfig.warning.content, 'warning', {
            ...this._defaultConfig,
            ...this._defaultConfig?.warning,
            ...options,
        });
        return toast;
    }
    /**
     * Opens up an hot-toast with pre-configurations for info state
     *
     * @param message The message to show in the hot-toast.
     * @param [options] Additional configuration options for the hot-toast.
     * @returns
     * @memberof HotToastService
     * @since 3.3.0
     */
    info(message, options) {
        const toast = this.createToast(message || this._defaultConfig.info.content, 'info', {
            ...this._defaultConfig,
            ...this._defaultConfig?.info,
            ...options,
        });
        return toast;
    }
    /**
     *
     *  Opens up an hot-toast with pre-configurations for loading initially and then changes state based on messages
     *
     * @template T Type of observable
     * @param messages Messages for each state i.e. loading, success and error
     * @returns
     * @memberof HotToastService
     */
    observe(messages) {
        return (source) => {
            let toastRef;
            let start = 0;
            const loadingContent = messages.loading ?? this._defaultConfig.loading?.content;
            const successContent = messages.success ?? this._defaultConfig.success?.content;
            const errorContent = messages.error ?? this._defaultConfig.error?.content;
            return defer(() => {
                if (loadingContent) {
                    toastRef = this.createLoadingToast(loadingContent);
                    start = Date.now();
                }
                return source.pipe(tap({
                    ...(successContent && {
                        next: (val) => {
                            toastRef = this.createOrUpdateToast(messages, val, toastRef, 'success', start === 0 ? start : Date.now() - start);
                        },
                    }),
                    ...(errorContent && {
                        error: (e) => {
                            toastRef = this.createOrUpdateToast(messages, e, toastRef, 'error', start === 0 ? start : Date.now() - start);
                        },
                    }),
                }));
            });
        };
    }
    /**
     * Closes the hot-toast
     *
     * @param [id] - ID of the toast
     * @since 3.0.1 - If ID is not provided, all toasts will be closed
     */
    close(id) {
        if (this._componentRef) {
            this._componentRef.ref.instance.closeToast(id);
        }
    }
    /**
     * Used for internal purpose only.
     * Creates a container component and attaches it to document.body.
     */
    init() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this._componentRef = this._viewService
            .createComponent(HotToastContainerComponent)
            .setInput('defaultConfig', this._defaultConfig)
            .appendTo(document.body);
    }
    createOrUpdateToast(messages, val, toastRef, type, diff) {
        try {
            let content = null;
            let options = {};
            ({ content, options } = this.getContentAndOptions(type, messages[type] || (this._defaultConfig[type] ? this._defaultConfig[type].content : '')));
            content = resolveValueOrFunction(content, val);
            if (toastRef) {
                if (options.data) {
                    toastRef.data = options.data;
                }
                toastRef.updateMessage(content);
                const updatedOptions = {
                    type,
                    duration: diff + HOT_TOAST_DEFAULT_TIMEOUTS[type],
                    ...options,
                    ...(options.duration && { duration: diff + options.duration }),
                };
                toastRef.updateToast(updatedOptions);
            }
            else {
                this.createToast(content, type, options);
            }
            return toastRef;
        }
        catch (error) {
            console.error(error);
        }
    }
    createToast(message, type, options, observableMessages) {
        if (!this._isInitialized) {
            this._isInitialized = true;
            this.init();
        }
        const now = Date.now();
        const id = options?.id ?? now.toString();
        if (!this.isDuplicate(id) &&
            (!options.persist?.enabled || (options.persist?.enabled && this.handleStorageValue(id, options)))) {
            const toast = {
                ariaLive: options?.ariaLive ?? 'polite',
                createdAt: now,
                duration: options?.duration ?? HOT_TOAST_DEFAULT_TIMEOUTS[type],
                id,
                message,
                role: options?.role ?? 'status',
                type,
                visible: true,
                observableMessages: observableMessages ?? undefined,
                ...options,
            };
            return new HotToastRef(toast).appendTo(this._componentRef.ref.instance);
        }
    }
    /**
     * Checks whether any toast with same id is present.
     *
     * @private
     * @param id - Toast ID
     */
    isDuplicate(id) {
        return this._componentRef.ref.instance.hasToast(id);
    }
    /**
     * Creates an entry in local or session storage with count ${defaultConfig.persist.count}, if not present.
     * If present in storage, reduces the count
     * and returns the count.
     * Count can not be less than 0.
     */
    handleStorageValue(id, options) {
        let count = 1;
        const persist = { ...this._defaultPersistConfig, ...options.persist };
        const storage = persist.storage === 'local' ? localStorage : sessionStorage;
        const key = persist.key.replace(/\${id}/g, id);
        let item = storage.getItem(key);
        if (item) {
            item = parseInt(item, 10);
            if (item > 0) {
                count = item - 1;
            }
            else {
                count = item;
            }
        }
        else {
            count = persist.count;
        }
        storage.setItem(key, count.toString());
        return count;
    }
    getContentAndOptions(toastType, message) {
        let content;
        let options = {
            ...this._defaultConfig,
            ...this._defaultConfig[toastType],
        };
        // typeof message === 'object' won't work, cz TemplateRef's type is object
        if (typeof message === 'string' || isTemplateRef(message) || isComponent(message)) {
            content = message;
        }
        else {
            let restOptions;
            ({ content, ...restOptions } = message);
            options = { ...options, ...restOptions };
        }
        return { content, options };
    }
    createLoadingToast(messages) {
        let content = null;
        let options = {};
        ({ content, options } = this.getContentAndOptions('loading', messages));
        return this.loading(content, options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: HotToastService, deps: [{ token: i1.ViewService }, { token: PLATFORM_ID }, { token: i2.ToastConfig, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: HotToastService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: HotToastService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.ViewService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i2.ToastConfig, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG90LXRvYXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ25lYXQvaG90LXRvYXN0L3NyYy9saWIvaG90LXRvYXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQW9CLFdBQVcsRUFBRSxhQUFhLEVBQWUsTUFBTSxrQkFBa0IsQ0FBQztBQUM3RixPQUFPLEVBQUUsS0FBSyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnRUFBZ0UsQ0FBQztBQUM1RyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFPTCxzQkFBc0IsRUFFdEIsV0FBVyxFQUVYLGtCQUFrQixHQUluQixNQUFNLG1CQUFtQixDQUFDOzs7O0FBRzNCLE1BQU0sT0FBTyxlQUFlO0lBTzFCLFlBQ1UsWUFBeUIsRUFDSixVQUFrQixFQUNuQyxNQUFtQjtRQUZ2QixpQkFBWSxHQUFaLFlBQVksQ0FBYTtRQUNKLGVBQVUsR0FBVixVQUFVLENBQVE7UUFSekMsbUJBQWMsR0FBRyxLQUFLLENBQUM7UUFHdkIsbUJBQWMsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ25DLDBCQUFxQixHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztRQU92RCxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxjQUFjLEdBQUc7Z0JBQ3BCLEdBQUcsSUFB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QUMsU0FBUyxDQUFDO1NBQ2xDLENBQUM7UUFFRiwwRUFBMEU7UUFDMUUsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNqRixPQUFPLEdBQUcsT0FBTyxDQUFDO1NBQ25CO2FBQU07WUFDTCxJQUFJLFdBQW1DLENBQUM7WUFDeEMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLFdBQVcsRUFBRSxHQUFHLE9BQThFLENBQUMsQ0FBQztZQUMvRyxPQUFPLEdBQUcsRUFBRSxHQUFHLE9BQU8sRUFBRSxHQUFHLFdBQVcsRUFBRSxDQUFDO1NBQzFDO1FBRUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRU8sa0JBQWtCLENBQWMsUUFBK0M7UUFDckYsSUFBSSxPQUFPLEdBQTBDLElBQUksQ0FBQztRQUMxRCxJQUFJLE9BQU8sR0FBcUMsRUFBRSxDQUFDO1FBRW5ELENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFnQixTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUV2RixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDOzhHQXhXVSxlQUFlLDZDQVNoQixXQUFXO2tIQVRWLGVBQWUsY0FERixNQUFNOzsyRkFDbkIsZUFBZTtrQkFEM0IsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OzBCQVU3QixNQUFNOzJCQUFDLFdBQVc7OzBCQUNsQixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsLCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcFJlZiwgQ29udGVudCwgaXNDb21wb25lbnQsIGlzVGVtcGxhdGVSZWYsIFZpZXdTZXJ2aWNlIH0gZnJvbSAnQG5nbmVhdC9vdmVydmlldyc7XG5pbXBvcnQgeyBkZWZlciwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBIb3RUb2FzdENvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9ob3QtdG9hc3QtY29udGFpbmVyL2hvdC10b2FzdC1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEhPVF9UT0FTVF9ERUZBVUxUX1RJTUVPVVRTIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgSG90VG9hc3RSZWYgfSBmcm9tICcuL2hvdC10b2FzdC1yZWYnO1xuaW1wb3J0IHtcbiAgQ3JlYXRlSG90VG9hc3RSZWYsXG4gIERlZmF1bHRUb2FzdE9wdGlvbnMsXG4gIEhvdFRvYXN0U2VydmljZU1ldGhvZHMsXG4gIE9ic2VydmFibGVMb2FkaW5nLFxuICBPYnNlcnZhYmxlTWVzc2FnZXMsXG4gIE9ic2VydmFibGVTdWNjZXNzT3JFcnJvcixcbiAgcmVzb2x2ZVZhbHVlT3JGdW5jdGlvbixcbiAgVG9hc3QsXG4gIFRvYXN0Q29uZmlnLFxuICBUb2FzdE9wdGlvbnMsXG4gIFRvYXN0UGVyc2lzdENvbmZpZyxcbiAgVG9hc3RUeXBlLFxuICBVcGRhdGVUb2FzdE9wdGlvbnMsXG4gIFZhbHVlT3JGdW5jdGlvbixcbn0gZnJvbSAnLi9ob3QtdG9hc3QubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEhvdFRvYXN0U2VydmljZSBpbXBsZW1lbnRzIEhvdFRvYXN0U2VydmljZU1ldGhvZHMge1xuICBwcml2YXRlIF9pc0luaXRpYWxpemVkID0gZmFsc2U7XG4gIHByaXZhdGUgX2NvbXBvbmVudFJlZjogQ29tcFJlZjxIb3RUb2FzdENvbnRhaW5lckNvbXBvbmVudD47XG5cbiAgcHJpdmF0ZSBfZGVmYXVsdENvbmZpZyA9IG5ldyBUb2FzdENvbmZpZygpO1xuICBwcml2YXRlIF9kZWZhdWx0UGVyc2lzdENvbmZpZyA9IG5ldyBUb2FzdFBlcnNpc3RDb25maWcoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF92aWV3U2VydmljZTogVmlld1NlcnZpY2UsXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBzdHJpbmcsXG4gICAgQE9wdGlvbmFsKCkgY29uZmlnOiBUb2FzdENvbmZpZ1xuICApIHtcbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICB0aGlzLl9kZWZhdWx0Q29uZmlnID0ge1xuICAgICAgICAuLi50aGlzLl9kZWZhdWx0Q29uZmlnLFxuICAgICAgICAuLi5jb25maWcsXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGdldCBkZWZhdWx0Q29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0Q29uZmlnO1xuICB9XG4gIHNldCBkZWZhdWx0Q29uZmlnKGNvbmZpZzogVG9hc3RDb25maWcpIHtcbiAgICB0aGlzLl9kZWZhdWx0Q29uZmlnID0ge1xuICAgICAgLi4udGhpcy5fZGVmYXVsdENvbmZpZyxcbiAgICAgIC4uLmNvbmZpZyxcbiAgICB9O1xuICAgIGlmICh0aGlzLl9jb21wb25lbnRSZWYpIHtcbiAgICAgIHRoaXMuX2NvbXBvbmVudFJlZi5zZXRJbnB1dCgnZGVmYXVsdENvbmZpZycsIHRoaXMuX2RlZmF1bHRDb25maWcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB1cCBhbiBob3QtdG9hc3Qgd2l0aG91dCBhbnkgcHJlLWNvbmZpZ3VyYXRpb25zXG4gICAqXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHNob3cgaW4gdGhlIGhvdC10b2FzdC5cbiAgICogQHBhcmFtIFtvcHRpb25zXSBBZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGhvdC10b2FzdC5cbiAgICogQHJldHVybnNcbiAgICogQG1lbWJlcm9mIEhvdFRvYXN0U2VydmljZVxuICAgKi9cbiAgc2hvdzxEYXRhVHlwZT4obWVzc2FnZT86IENvbnRlbnQsIG9wdGlvbnM/OiBUb2FzdE9wdGlvbnM8RGF0YVR5cGU+KTogQ3JlYXRlSG90VG9hc3RSZWY8RGF0YVR5cGUgfCB1bmtub3duPiB7XG4gICAgY29uc3QgdG9hc3QgPSB0aGlzLmNyZWF0ZVRvYXN0PERhdGFUeXBlPihtZXNzYWdlIHx8IHRoaXMuX2RlZmF1bHRDb25maWcuYmxhbmsuY29udGVudCwgJ2JsYW5rJywge1xuICAgICAgLi4udGhpcy5fZGVmYXVsdENvbmZpZyxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdG9hc3Q7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdXAgYW4gaG90LXRvYXN0IHdpdGggcHJlLWNvbmZpZ3VyYXRpb25zIGZvciBlcnJvciBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzaG93IGluIHRoZSBob3QtdG9hc3QuXG4gICAqIEBwYXJhbSBbb3B0aW9uc10gQWRkaXRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBob3QtdG9hc3QuXG4gICAqIEByZXR1cm5zXG4gICAqIEBtZW1iZXJvZiBIb3RUb2FzdFNlcnZpY2VcbiAgICovXG4gIGVycm9yPERhdGFUeXBlPihtZXNzYWdlPzogQ29udGVudCwgb3B0aW9ucz86IFRvYXN0T3B0aW9uczxEYXRhVHlwZT4pOiBDcmVhdGVIb3RUb2FzdFJlZjxEYXRhVHlwZSB8IHVua25vd24+IHtcbiAgICBjb25zdCB0b2FzdCA9IHRoaXMuY3JlYXRlVG9hc3Q8RGF0YVR5cGU+KG1lc3NhZ2UgfHwgdGhpcy5fZGVmYXVsdENvbmZpZy5lcnJvci5jb250ZW50LCAnZXJyb3InLCB7XG4gICAgICAuLi50aGlzLl9kZWZhdWx0Q29uZmlnLFxuICAgICAgLi4udGhpcy5fZGVmYXVsdENvbmZpZz8uZXJyb3IsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRvYXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHVwIGFuIGhvdC10b2FzdCB3aXRoIHByZS1jb25maWd1cmF0aW9ucyBmb3Igc3VjY2VzcyBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzaG93IGluIHRoZSBob3QtdG9hc3QuXG4gICAqIEBwYXJhbSBbb3B0aW9uc10gQWRkaXRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBob3QtdG9hc3QuXG4gICAqIEByZXR1cm5zXG4gICAqIEBtZW1iZXJvZiBIb3RUb2FzdFNlcnZpY2VcbiAgICovXG4gIHN1Y2Nlc3M8RGF0YVR5cGU+KG1lc3NhZ2U/OiBDb250ZW50LCBvcHRpb25zPzogVG9hc3RPcHRpb25zPERhdGFUeXBlPik6IENyZWF0ZUhvdFRvYXN0UmVmPERhdGFUeXBlIHwgdW5rbm93bj4ge1xuICAgIGNvbnN0IHRvYXN0ID0gdGhpcy5jcmVhdGVUb2FzdDxEYXRhVHlwZT4obWVzc2FnZSB8fCB0aGlzLl9kZWZhdWx0Q29uZmlnLnN1Y2Nlc3MuY29udGVudCwgJ3N1Y2Nlc3MnLCB7XG4gICAgICAuLi50aGlzLl9kZWZhdWx0Q29uZmlnLFxuICAgICAgLi4udGhpcy5fZGVmYXVsdENvbmZpZz8uc3VjY2VzcyxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdG9hc3Q7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdXAgYW4gaG90LXRvYXN0IHdpdGggcHJlLWNvbmZpZ3VyYXRpb25zIGZvciBsb2FkaW5nIHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHNob3cgaW4gdGhlIGhvdC10b2FzdC5cbiAgICogQHBhcmFtIFtvcHRpb25zXSBBZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGhvdC10b2FzdC5cbiAgICogQHJldHVybnNcbiAgICogQG1lbWJlcm9mIEhvdFRvYXN0U2VydmljZVxuICAgKi9cbiAgbG9hZGluZzxEYXRhVHlwZT4obWVzc2FnZT86IENvbnRlbnQsIG9wdGlvbnM/OiBUb2FzdE9wdGlvbnM8RGF0YVR5cGU+KTogQ3JlYXRlSG90VG9hc3RSZWY8RGF0YVR5cGUgfCB1bmtub3duPiB7XG4gICAgY29uc3QgdG9hc3QgPSB0aGlzLmNyZWF0ZVRvYXN0PERhdGFUeXBlPihtZXNzYWdlIHx8IHRoaXMuX2RlZmF1bHRDb25maWcubG9hZGluZy5jb250ZW50LCAnbG9hZGluZycsIHtcbiAgICAgIC4uLnRoaXMuX2RlZmF1bHRDb25maWcsXG4gICAgICAuLi50aGlzLl9kZWZhdWx0Q29uZmlnPy5sb2FkaW5nLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9KTtcblxuICAgIHJldHVybiB0b2FzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB1cCBhbiBob3QtdG9hc3Qgd2l0aCBwcmUtY29uZmlndXJhdGlvbnMgZm9yIHdhcm5pbmcgc3RhdGVcbiAgICpcbiAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gc2hvdyBpbiB0aGUgaG90LXRvYXN0LlxuICAgKiBAcGFyYW0gW29wdGlvbnNdIEFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgaG90LXRvYXN0LlxuICAgKiBAcmV0dXJuc1xuICAgKiBAbWVtYmVyb2YgSG90VG9hc3RTZXJ2aWNlXG4gICAqL1xuICB3YXJuaW5nPERhdGFUeXBlPihtZXNzYWdlPzogQ29udGVudCwgb3B0aW9ucz86IFRvYXN0T3B0aW9uczxEYXRhVHlwZT4pOiBDcmVhdGVIb3RUb2FzdFJlZjxEYXRhVHlwZSB8IHVua25vd24+IHtcbiAgICBjb25zdCB0b2FzdCA9IHRoaXMuY3JlYXRlVG9hc3Q8RGF0YVR5cGU+KG1lc3NhZ2UgfHwgdGhpcy5fZGVmYXVsdENvbmZpZy53YXJuaW5nLmNvbnRlbnQsICd3YXJuaW5nJywge1xuICAgICAgLi4udGhpcy5fZGVmYXVsdENvbmZpZyxcbiAgICAgIC4uLnRoaXMuX2RlZmF1bHRDb25maWc/Lndhcm5pbmcsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRvYXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHVwIGFuIGhvdC10b2FzdCB3aXRoIHByZS1jb25maWd1cmF0aW9ucyBmb3IgaW5mbyBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzaG93IGluIHRoZSBob3QtdG9hc3QuXG4gICAqIEBwYXJhbSBbb3B0aW9uc10gQWRkaXRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBob3QtdG9hc3QuXG4gICAqIEByZXR1cm5zXG4gICAqIEBtZW1iZXJvZiBIb3RUb2FzdFNlcnZpY2VcbiAgICogQHNpbmNlIDMuMy4wXG4gICAqL1xuICBpbmZvPERhdGFUeXBlPihtZXNzYWdlPzogQ29udGVudCwgb3B0aW9ucz86IFRvYXN0T3B0aW9uczxEYXRhVHlwZT4pOiBDcmVhdGVIb3RUb2FzdFJlZjxEYXRhVHlwZSB8IHVua25vd24+IHtcbiAgICBjb25zdCB0b2FzdCA9IHRoaXMuY3JlYXRlVG9hc3Q8RGF0YVR5cGU+KG1lc3NhZ2UgfHwgdGhpcy5fZGVmYXVsdENvbmZpZy5pbmZvLmNvbnRlbnQsICdpbmZvJywge1xuICAgICAgLi4udGhpcy5fZGVmYXVsdENvbmZpZyxcbiAgICAgIC4uLnRoaXMuX2RlZmF1bHRDb25maWc/LmluZm8sXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRvYXN0O1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqICBPcGVucyB1cCBhbiBob3QtdG9hc3Qgd2l0aCBwcmUtY29uZmlndXJhdGlvbnMgZm9yIGxvYWRpbmcgaW5pdGlhbGx5IGFuZCB0aGVuIGNoYW5nZXMgc3RhdGUgYmFzZWQgb24gbWVzc2FnZXNcbiAgICpcbiAgICogQHRlbXBsYXRlIFQgVHlwZSBvZiBvYnNlcnZhYmxlXG4gICAqIEBwYXJhbSBtZXNzYWdlcyBNZXNzYWdlcyBmb3IgZWFjaCBzdGF0ZSBpLmUuIGxvYWRpbmcsIHN1Y2Nlc3MgYW5kIGVycm9yXG4gICAqIEByZXR1cm5zXG4gICAqIEBtZW1iZXJvZiBIb3RUb2FzdFNlcnZpY2VcbiAgICovXG4gIG9ic2VydmU8VCwgRGF0YVR5cGU+KG1lc3NhZ2VzOiBPYnNlcnZhYmxlTWVzc2FnZXM8VCwgRGF0YVR5cGU+KTogKHNvdXJjZTogT2JzZXJ2YWJsZTxUPikgPT4gT2JzZXJ2YWJsZTxUPiB7XG4gICAgcmV0dXJuIChzb3VyY2UpID0+IHtcbiAgICAgIGxldCB0b2FzdFJlZjogQ3JlYXRlSG90VG9hc3RSZWY8RGF0YVR5cGUgfCB1bmtub3duPjtcbiAgICAgIGxldCBzdGFydCA9IDA7XG5cbiAgICAgIGNvbnN0IGxvYWRpbmdDb250ZW50ID0gbWVzc2FnZXMubG9hZGluZyA/PyB0aGlzLl9kZWZhdWx0Q29uZmlnLmxvYWRpbmc/LmNvbnRlbnQ7XG4gICAgICBjb25zdCBzdWNjZXNzQ29udGVudCA9IG1lc3NhZ2VzLnN1Y2Nlc3MgPz8gdGhpcy5fZGVmYXVsdENvbmZpZy5zdWNjZXNzPy5jb250ZW50O1xuICAgICAgY29uc3QgZXJyb3JDb250ZW50ID0gbWVzc2FnZXMuZXJyb3IgPz8gdGhpcy5fZGVmYXVsdENvbmZpZy5lcnJvcj8uY29udGVudDtcblxuICAgICAgcmV0dXJuIGRlZmVyKCgpID0+IHtcbiAgICAgICAgaWYgKGxvYWRpbmdDb250ZW50KSB7XG4gICAgICAgICAgdG9hc3RSZWYgPSB0aGlzLmNyZWF0ZUxvYWRpbmdUb2FzdDxULCBEYXRhVHlwZT4obG9hZGluZ0NvbnRlbnQpO1xuICAgICAgICAgIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlLnBpcGUoXG4gICAgICAgICAgdGFwKHtcbiAgICAgICAgICAgIC4uLihzdWNjZXNzQ29udGVudCAmJiB7XG4gICAgICAgICAgICAgIG5leHQ6ICh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICB0b2FzdFJlZiA9IHRoaXMuY3JlYXRlT3JVcGRhdGVUb2FzdDxULCBEYXRhVHlwZSB8IHVua25vd24+KFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZXMsXG4gICAgICAgICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICAgICAgICB0b2FzdFJlZixcbiAgICAgICAgICAgICAgICAgICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgIHN0YXJ0ID09PSAwID8gc3RhcnQgOiBEYXRlLm5vdygpIC0gc3RhcnRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAuLi4oZXJyb3JDb250ZW50ICYmIHtcbiAgICAgICAgICAgICAgZXJyb3I6IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgdG9hc3RSZWYgPSB0aGlzLmNyZWF0ZU9yVXBkYXRlVG9hc3Q8VCwgRGF0YVR5cGUgfCB1bmtub3duPihcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzLFxuICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgIHRvYXN0UmVmLFxuICAgICAgICAgICAgICAgICAgJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgIHN0YXJ0ID09PSAwID8gc3RhcnQgOiBEYXRlLm5vdygpIC0gc3RhcnRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBob3QtdG9hc3RcbiAgICpcbiAgICogQHBhcmFtIFtpZF0gLSBJRCBvZiB0aGUgdG9hc3RcbiAgICogQHNpbmNlIDMuMC4xIC0gSWYgSUQgaXMgbm90IHByb3ZpZGVkLCBhbGwgdG9hc3RzIHdpbGwgYmUgY2xvc2VkXG4gICAqL1xuICBjbG9zZShpZD86IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9jb21wb25lbnRSZWYpIHtcbiAgICAgIHRoaXMuX2NvbXBvbmVudFJlZi5yZWYuaW5zdGFuY2UuY2xvc2VUb2FzdChpZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgZm9yIGludGVybmFsIHB1cnBvc2Ugb25seS5cbiAgICogQ3JlYXRlcyBhIGNvbnRhaW5lciBjb21wb25lbnQgYW5kIGF0dGFjaGVzIGl0IHRvIGRvY3VtZW50LmJvZHkuXG4gICAqL1xuICBwcml2YXRlIGluaXQoKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1TZXJ2ZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9jb21wb25lbnRSZWYgPSB0aGlzLl92aWV3U2VydmljZVxuICAgICAgLmNyZWF0ZUNvbXBvbmVudChIb3RUb2FzdENvbnRhaW5lckNvbXBvbmVudClcbiAgICAgIC5zZXRJbnB1dCgnZGVmYXVsdENvbmZpZycsIHRoaXMuX2RlZmF1bHRDb25maWcpXG4gICAgICAuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZU9yVXBkYXRlVG9hc3Q8VCwgRGF0YVR5cGU+KFxuICAgIG1lc3NhZ2VzOiBPYnNlcnZhYmxlTWVzc2FnZXM8VCwgRGF0YVR5cGU+LFxuICAgIHZhbDogdW5rbm93bixcbiAgICB0b2FzdFJlZjogQ3JlYXRlSG90VG9hc3RSZWY8RGF0YVR5cGU+LFxuICAgIHR5cGU6IFRvYXN0VHlwZSxcbiAgICBkaWZmOiBudW1iZXJcbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBjb250ZW50OiBDb250ZW50IHwgVmFsdWVPckZ1bmN0aW9uPENvbnRlbnQsIFQ+ID0gbnVsbDtcbiAgICAgIGxldCBvcHRpb25zOiBUb2FzdE9wdGlvbnM8RGF0YVR5cGUgfCB1bmtub3duPiA9IHt9O1xuICAgICAgKHsgY29udGVudCwgb3B0aW9ucyB9ID0gdGhpcy5nZXRDb250ZW50QW5kT3B0aW9uczxhbnksIERhdGFUeXBlPihcbiAgICAgICAgdHlwZSxcbiAgICAgICAgbWVzc2FnZXNbdHlwZV0gfHwgKHRoaXMuX2RlZmF1bHRDb25maWdbdHlwZV0gPyB0aGlzLl9kZWZhdWx0Q29uZmlnW3R5cGVdLmNvbnRlbnQgOiAnJylcbiAgICAgICkpO1xuICAgICAgY29udGVudCA9IHJlc29sdmVWYWx1ZU9yRnVuY3Rpb24oY29udGVudCwgdmFsKTtcbiAgICAgIGlmICh0b2FzdFJlZikge1xuICAgICAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICAgICAgdG9hc3RSZWYuZGF0YSA9IG9wdGlvbnMuZGF0YSBhcyBEYXRhVHlwZTtcbiAgICAgICAgfVxuICAgICAgICB0b2FzdFJlZi51cGRhdGVNZXNzYWdlKGNvbnRlbnQpO1xuICAgICAgICBjb25zdCB1cGRhdGVkT3B0aW9uczogVXBkYXRlVG9hc3RPcHRpb25zPERhdGFUeXBlPiA9IHtcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGR1cmF0aW9uOiBkaWZmICsgSE9UX1RPQVNUX0RFRkFVTFRfVElNRU9VVFNbdHlwZV0sXG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAuLi4ob3B0aW9ucy5kdXJhdGlvbiAmJiB7IGR1cmF0aW9uOiBkaWZmICsgb3B0aW9ucy5kdXJhdGlvbiB9KSxcbiAgICAgICAgfTtcbiAgICAgICAgdG9hc3RSZWYudXBkYXRlVG9hc3QodXBkYXRlZE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jcmVhdGVUb2FzdDxEYXRhVHlwZSwgVD4oY29udGVudCwgdHlwZSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9hc3RSZWY7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlVG9hc3Q8RGF0YVR5cGUsIFQgPSB1bmtub3duPihcbiAgICBtZXNzYWdlOiBDb250ZW50LFxuICAgIHR5cGU6IFRvYXN0VHlwZSxcbiAgICBvcHRpb25zPzogRGVmYXVsdFRvYXN0T3B0aW9ucyxcbiAgICBvYnNlcnZhYmxlTWVzc2FnZXM/OiBPYnNlcnZhYmxlTWVzc2FnZXM8VCwgRGF0YVR5cGU+XG4gICk6IENyZWF0ZUhvdFRvYXN0UmVmPERhdGFUeXBlIHwgdW5rbm93bj4ge1xuICAgIGlmICghdGhpcy5faXNJbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5faXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGlkID0gb3B0aW9ucz8uaWQgPz8gbm93LnRvU3RyaW5nKCk7XG5cbiAgICBpZiAoXG4gICAgICAhdGhpcy5pc0R1cGxpY2F0ZShpZCkgJiZcbiAgICAgICghb3B0aW9ucy5wZXJzaXN0Py5lbmFibGVkIHx8IChvcHRpb25zLnBlcnNpc3Q/LmVuYWJsZWQgJiYgdGhpcy5oYW5kbGVTdG9yYWdlVmFsdWUoaWQsIG9wdGlvbnMpKSlcbiAgICApIHtcbiAgICAgIGNvbnN0IHRvYXN0OiBUb2FzdDxEYXRhVHlwZSB8IHVua25vd24+ID0ge1xuICAgICAgICBhcmlhTGl2ZTogb3B0aW9ucz8uYXJpYUxpdmUgPz8gJ3BvbGl0ZScsXG4gICAgICAgIGNyZWF0ZWRBdDogbm93LFxuICAgICAgICBkdXJhdGlvbjogb3B0aW9ucz8uZHVyYXRpb24gPz8gSE9UX1RPQVNUX0RFRkFVTFRfVElNRU9VVFNbdHlwZV0sXG4gICAgICAgIGlkLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICByb2xlOiBvcHRpb25zPy5yb2xlID8/ICdzdGF0dXMnLFxuICAgICAgICB0eXBlLFxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICBvYnNlcnZhYmxlTWVzc2FnZXM6IG9ic2VydmFibGVNZXNzYWdlcyA/PyB1bmRlZmluZWQsXG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gbmV3IEhvdFRvYXN0UmVmPERhdGFUeXBlIHwgdW5rbm93bj4odG9hc3QpLmFwcGVuZFRvKHRoaXMuX2NvbXBvbmVudFJlZi5yZWYuaW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBhbnkgdG9hc3Qgd2l0aCBzYW1lIGlkIGlzIHByZXNlbnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSBpZCAtIFRvYXN0IElEXG4gICAqL1xuICBwcml2YXRlIGlzRHVwbGljYXRlKGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50UmVmLnJlZi5pbnN0YW5jZS5oYXNUb2FzdChpZCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBlbnRyeSBpbiBsb2NhbCBvciBzZXNzaW9uIHN0b3JhZ2Ugd2l0aCBjb3VudCAke2RlZmF1bHRDb25maWcucGVyc2lzdC5jb3VudH0sIGlmIG5vdCBwcmVzZW50LlxuICAgKiBJZiBwcmVzZW50IGluIHN0b3JhZ2UsIHJlZHVjZXMgdGhlIGNvdW50XG4gICAqIGFuZCByZXR1cm5zIHRoZSBjb3VudC5cbiAgICogQ291bnQgY2FuIG5vdCBiZSBsZXNzIHRoYW4gMC5cbiAgICovXG4gIHByaXZhdGUgaGFuZGxlU3RvcmFnZVZhbHVlKGlkOiBzdHJpbmcsIG9wdGlvbnM6IERlZmF1bHRUb2FzdE9wdGlvbnMpOiBudW1iZXIge1xuICAgIGxldCBjb3VudCA9IDE7XG4gICAgY29uc3QgcGVyc2lzdCA9IHsgLi4udGhpcy5fZGVmYXVsdFBlcnNpc3RDb25maWcsIC4uLm9wdGlvbnMucGVyc2lzdCB9O1xuICAgIGNvbnN0IHN0b3JhZ2U6IFN0b3JhZ2UgPSBwZXJzaXN0LnN0b3JhZ2UgPT09ICdsb2NhbCcgPyBsb2NhbFN0b3JhZ2UgOiBzZXNzaW9uU3RvcmFnZTtcbiAgICBjb25zdCBrZXkgPSBwZXJzaXN0LmtleS5yZXBsYWNlKC9cXCR7aWR9L2csIGlkKTtcblxuICAgIGxldCBpdGVtOiBzdHJpbmcgfCBudW1iZXIgPSBzdG9yYWdlLmdldEl0ZW0oa2V5KTtcblxuICAgIGlmIChpdGVtKSB7XG4gICAgICBpdGVtID0gcGFyc2VJbnQoaXRlbSwgMTApO1xuICAgICAgaWYgKGl0ZW0gPiAwKSB7XG4gICAgICAgIGNvdW50ID0gaXRlbSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3VudCA9IGl0ZW07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gcGVyc2lzdC5jb3VudDtcbiAgICB9XG5cbiAgICBzdG9yYWdlLnNldEl0ZW0oa2V5LCBjb3VudC50b1N0cmluZygpKTtcblxuICAgIHJldHVybiBjb3VudDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29udGVudEFuZE9wdGlvbnM8VCwgRGF0YVR5cGU+KFxuICAgIHRvYXN0VHlwZTogVG9hc3RUeXBlLFxuICAgIG1lc3NhZ2U6IENvbnRlbnQgfCBWYWx1ZU9yRnVuY3Rpb248Q29udGVudCwgVD4gfCBPYnNlcnZhYmxlTG9hZGluZzxEYXRhVHlwZT4gfCBPYnNlcnZhYmxlU3VjY2Vzc09yRXJyb3I8VCwgRGF0YVR5cGU+XG4gICk6IHsgb3B0aW9uczogVG9hc3RPcHRpb25zPERhdGFUeXBlIHwgdW5rbm93bj47IGNvbnRlbnQ6IENvbnRlbnQgfCBWYWx1ZU9yRnVuY3Rpb248Q29udGVudCwgVD4gfSB7XG4gICAgbGV0IGNvbnRlbnQ6IENvbnRlbnQgfCBWYWx1ZU9yRnVuY3Rpb248Q29udGVudCwgVD47XG4gICAgbGV0IG9wdGlvbnM6IFRvYXN0T3B0aW9uczxEYXRhVHlwZSB8IHVua25vd24+ID0ge1xuICAgICAgLi4udGhpcy5fZGVmYXVsdENvbmZpZyxcbiAgICAgIC4uLnRoaXMuX2RlZmF1bHRDb25maWdbdG9hc3RUeXBlXSxcbiAgICB9O1xuXG4gICAgLy8gdHlwZW9mIG1lc3NhZ2UgPT09ICdvYmplY3QnIHdvbid0IHdvcmssIGN6IFRlbXBsYXRlUmVmJ3MgdHlwZSBpcyBvYmplY3RcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnIHx8IGlzVGVtcGxhdGVSZWYobWVzc2FnZSkgfHwgaXNDb21wb25lbnQobWVzc2FnZSkpIHtcbiAgICAgIGNvbnRlbnQgPSBtZXNzYWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcmVzdE9wdGlvbnM6IFRvYXN0T3B0aW9uczxEYXRhVHlwZT47XG4gICAgICAoeyBjb250ZW50LCAuLi5yZXN0T3B0aW9ucyB9ID0gbWVzc2FnZSBhcyBPYnNlcnZhYmxlTG9hZGluZzxEYXRhVHlwZT4gfCBPYnNlcnZhYmxlU3VjY2Vzc09yRXJyb3I8VCwgRGF0YVR5cGU+KTtcbiAgICAgIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIC4uLnJlc3RPcHRpb25zIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgY29udGVudCwgb3B0aW9ucyB9O1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVMb2FkaW5nVG9hc3Q8VCwgRGF0YVR5cGU+KG1lc3NhZ2VzOiBDb250ZW50IHwgT2JzZXJ2YWJsZUxvYWRpbmc8RGF0YVR5cGU+KSB7XG4gICAgbGV0IGNvbnRlbnQ6IENvbnRlbnQgfCBWYWx1ZU9yRnVuY3Rpb248Q29udGVudCwgVD4gPSBudWxsO1xuICAgIGxldCBvcHRpb25zOiBUb2FzdE9wdGlvbnM8RGF0YVR5cGUgfCB1bmtub3duPiA9IHt9O1xuXG4gICAgKHsgY29udGVudCwgb3B0aW9ucyB9ID0gdGhpcy5nZXRDb250ZW50QW5kT3B0aW9uczxhbnksIERhdGFUeXBlPignbG9hZGluZycsIG1lc3NhZ2VzKSk7XG5cbiAgICByZXR1cm4gdGhpcy5sb2FkaW5nKGNvbnRlbnQgYXMgQ29udGVudCwgb3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==