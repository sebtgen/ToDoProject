import { race, Subject } from 'rxjs';
export class HotToastRef {
    constructor(toast) {
        this.toast = toast;
        /** Subject for notifying the user that the toast has been closed. */
        this._onClosed = new Subject();
    }
    set data(data) {
        this.toast.data = data;
    }
    get data() {
        return this.toast.data;
    }
    set dispose(value) {
        this._dispose = value;
    }
    getToast() {
        return this.toast;
    }
    /**Used for internal purpose
     * Attach ToastRef to container
     */
    appendTo(container) {
        const { dispose, updateMessage, updateToast, afterClosed } = container.addToast(this);
        this.dispose = dispose;
        this.updateMessage = updateMessage;
        this.updateToast = updateToast;
        this.afterClosed = race(this._onClosed.asObservable(), afterClosed);
        return this;
    }
    /**
     * Closes the toast
     *
     * @param [closeData={ dismissedByAction: false }] -
     * Make sure to pass { dismissedByAction: true } when closing from template
     * @memberof HotToastRef
     */
    close(closeData = { dismissedByAction: false }) {
        this._dispose();
        this._onClosed.next({ dismissedByAction: closeData.dismissedByAction, id: this.toast.id });
        this._onClosed.complete();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG90LXRvYXN0LXJlZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9ob3QtdG9hc3Qvc3JjL2xpYi9ob3QtdG9hc3QtcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBYyxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBTWpELE1BQU0sT0FBTyxXQUFXO0lBVXRCLFlBQW9CLEtBQXNCO1FBQXRCLFVBQUssR0FBTCxLQUFLLENBQWlCO1FBSDFDLHFFQUFxRTtRQUM3RCxjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQWlCLENBQUM7SUFFSixDQUFDO0lBRTlDLElBQUksSUFBSSxDQUFDLElBQWM7UUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFpQjtRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRLENBQUMsU0FBcUM7UUFDNUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEYsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNwRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxLQUFLLENBQUMsWUFBNEMsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUU7UUFDNUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250ZW50IH0gZnJvbSAnQG5nbmVhdC9vdmVydmlldyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCByYWNlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbi8vIFRoaXMgc2hvdWxkIGJlIGEgYHR5cGVgIGltcG9ydCBzaW5jZSBpdCBjYXVzZXMgYG5nLXBhY2thZ3JgIGNvbXBpbGF0aW9uIHRvIGZhaWwgYmVjYXVzZSBvZiBhIGN5Y2xpYyBkZXBlbmRlbmN5LlxuaW1wb3J0IHR5cGUgeyBIb3RUb2FzdENvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9ob3QtdG9hc3QtY29udGFpbmVyL2hvdC10b2FzdC1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEhvdFRvYXN0Q2xvc2UsIFRvYXN0LCBVcGRhdGVUb2FzdE9wdGlvbnMsIEhvdFRvYXN0UmVmUHJvcHMsIERlZmF1bHREYXRhVHlwZSB9IGZyb20gJy4vaG90LXRvYXN0Lm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIEhvdFRvYXN0UmVmPERhdGFUeXBlID0gRGVmYXVsdERhdGFUeXBlPiBpbXBsZW1lbnRzIEhvdFRvYXN0UmVmUHJvcHM8RGF0YVR5cGU+IHtcbiAgdXBkYXRlTWVzc2FnZTogKG1lc3NhZ2U6IENvbnRlbnQpID0+IHZvaWQ7XG4gIHVwZGF0ZVRvYXN0OiAob3B0aW9uczogVXBkYXRlVG9hc3RPcHRpb25zPERhdGFUeXBlPikgPT4gdm9pZDtcbiAgYWZ0ZXJDbG9zZWQ6IE9ic2VydmFibGU8SG90VG9hc3RDbG9zZT47XG5cbiAgcHJpdmF0ZSBfZGlzcG9zZTogKCkgPT4gdm9pZDtcblxuICAvKiogU3ViamVjdCBmb3Igbm90aWZ5aW5nIHRoZSB1c2VyIHRoYXQgdGhlIHRvYXN0IGhhcyBiZWVuIGNsb3NlZC4gKi9cbiAgcHJpdmF0ZSBfb25DbG9zZWQgPSBuZXcgU3ViamVjdDxIb3RUb2FzdENsb3NlPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdG9hc3Q6IFRvYXN0PERhdGFUeXBlPikge31cblxuICBzZXQgZGF0YShkYXRhOiBEYXRhVHlwZSkge1xuICAgIHRoaXMudG9hc3QuZGF0YSA9IGRhdGE7XG4gIH1cblxuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy50b2FzdC5kYXRhO1xuICB9XG5cbiAgc2V0IGRpc3Bvc2UodmFsdWU6ICgpID0+IHZvaWQpIHtcbiAgICB0aGlzLl9kaXNwb3NlID0gdmFsdWU7XG4gIH1cblxuICBnZXRUb2FzdCgpIHtcbiAgICByZXR1cm4gdGhpcy50b2FzdDtcbiAgfVxuXG4gIC8qKlVzZWQgZm9yIGludGVybmFsIHB1cnBvc2VcbiAgICogQXR0YWNoIFRvYXN0UmVmIHRvIGNvbnRhaW5lclxuICAgKi9cbiAgYXBwZW5kVG8oY29udGFpbmVyOiBIb3RUb2FzdENvbnRhaW5lckNvbXBvbmVudCkge1xuICAgIGNvbnN0IHsgZGlzcG9zZSwgdXBkYXRlTWVzc2FnZSwgdXBkYXRlVG9hc3QsIGFmdGVyQ2xvc2VkIH0gPSBjb250YWluZXIuYWRkVG9hc3QodGhpcyk7XG5cbiAgICB0aGlzLmRpc3Bvc2UgPSBkaXNwb3NlO1xuICAgIHRoaXMudXBkYXRlTWVzc2FnZSA9IHVwZGF0ZU1lc3NhZ2U7XG4gICAgdGhpcy51cGRhdGVUb2FzdCA9IHVwZGF0ZVRvYXN0O1xuICAgIHRoaXMuYWZ0ZXJDbG9zZWQgPSByYWNlKHRoaXMuX29uQ2xvc2VkLmFzT2JzZXJ2YWJsZSgpLCBhZnRlckNsb3NlZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSB0b2FzdFxuICAgKlxuICAgKiBAcGFyYW0gW2Nsb3NlRGF0YT17IGRpc21pc3NlZEJ5QWN0aW9uOiBmYWxzZSB9XSAtXG4gICAqIE1ha2Ugc3VyZSB0byBwYXNzIHsgZGlzbWlzc2VkQnlBY3Rpb246IHRydWUgfSB3aGVuIGNsb3NpbmcgZnJvbSB0ZW1wbGF0ZVxuICAgKiBAbWVtYmVyb2YgSG90VG9hc3RSZWZcbiAgICovXG4gIGNsb3NlKGNsb3NlRGF0YTogeyBkaXNtaXNzZWRCeUFjdGlvbjogYm9vbGVhbiB9ID0geyBkaXNtaXNzZWRCeUFjdGlvbjogZmFsc2UgfSkge1xuICAgIHRoaXMuX2Rpc3Bvc2UoKTtcbiAgICB0aGlzLl9vbkNsb3NlZC5uZXh0KHsgZGlzbWlzc2VkQnlBY3Rpb246IGNsb3NlRGF0YS5kaXNtaXNzZWRCeUFjdGlvbiwgaWQ6IHRoaXMudG9hc3QuaWQgfSk7XG4gICAgdGhpcy5fb25DbG9zZWQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19