import { Directive, Input, NgModule, } from '@angular/core';
import { isComponent, isString } from '../views/types';
import { DynamicViewComponent } from './dynamic-view.component';
import * as i0 from "@angular/core";
import * as i1 from "../views/view";
class DynamicViewDirective {
    constructor(defaultTpl, vcr, viewService) {
        this.defaultTpl = defaultTpl;
        this.vcr = vcr;
        this.viewService = viewService;
    }
    ngOnInit() {
        this.resolveContentType();
    }
    ngOnChanges(changes) {
        const viewChanged = changes.view && !changes.view.isFirstChange();
        const contextChanged = changes.context && !changes.context.isFirstChange();
        const inputsChanged = changes.inputs && !changes.inputs.isFirstChange();
        if (viewChanged) {
            this.resolveContentType();
        }
        else if (contextChanged) {
            this.viewRef.updateContext(this.context);
        }
        else if (isComponent(this.view) && inputsChanged) {
            this.viewRef.setInputs(this.inputs || {});
        }
    }
    resolveContentType() {
        this.viewRef?.destroy();
        if (isString(this.view)) {
            this.viewRef = this.viewService.createComponent(DynamicViewComponent, {
                vcr: this.vcr,
                injector: this.injector,
            });
            this.viewRef.setInput('content', this.view).detectChanges();
        }
        else if (isComponent(this.view)) {
            this.viewRef = this.viewService.createComponent(this.view, {
                vcr: this.vcr,
                injector: this.injector ?? this.vcr.injector,
                context: this.context,
            });
            if (this.inputs) {
                this.viewRef.setInputs(this.inputs);
            }
        }
        else {
            this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {
                vcr: this.vcr,
                injector: this.injector ?? this.vcr.injector,
                context: this.context,
            });
        }
    }
    ngOnDestroy() {
        this.viewRef?.destroy();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i1.ViewService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.3", type: DynamicViewDirective, selector: "[dynamicView]", inputs: { view: ["dynamicView", "view"], injector: ["dynamicViewInjector", "injector"], context: ["dynamicViewContext", "context"], inputs: ["dynamicViewInputs", "inputs"] }, usesOnChanges: true, ngImport: i0 }); }
}
export { DynamicViewDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dynamicView]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i1.ViewService }]; }, propDecorators: { view: [{
                type: Input,
                args: ['dynamicView']
            }], injector: [{
                type: Input,
                args: ['dynamicViewInjector']
            }], context: [{
                type: Input,
                args: ['dynamicViewContext']
            }], inputs: [{
                type: Input,
                args: ['dynamicViewInputs']
            }] } });
class DynamicViewModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewModule, declarations: [DynamicViewDirective, DynamicViewComponent], exports: [DynamicViewDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewModule }); }
}
export { DynamicViewModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: DynamicViewModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DynamicViewDirective, DynamicViewComponent],
                    exports: [DynamicViewDirective],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy12aWV3LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL2R5bmFtaWMtdmlldy9keW5hbWljLXZpZXcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUNMLFFBQVEsR0FPVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQVcsV0FBVyxFQUFFLFFBQVEsRUFBVyxNQUFNLGdCQUFnQixDQUFDO0FBR3pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7QUFFaEUsTUFHYSxvQkFBb0I7SUFRL0IsWUFBb0IsVUFBNEIsRUFBVSxHQUFxQixFQUFVLFdBQXdCO1FBQTdGLGVBQVUsR0FBVixVQUFVLENBQWtCO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtJQUFHLENBQUM7SUFFckgsUUFBUTtRQUNOLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDbEUsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDM0UsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFeEUsSUFBSSxXQUFXLEVBQUU7WUFDZixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUMzQjthQUFNLElBQUksY0FBYyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMxQzthQUFNLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLEVBQUU7WUFDakQsSUFBSSxDQUFDLE9BQXdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUM7U0FDN0Q7SUFDSCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFDeEIsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLEVBQUU7Z0JBQ3BFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztnQkFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7YUFDeEIsQ0FBQyxDQUFDO1lBQ0YsSUFBSSxDQUFDLE9BQXlDLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDaEc7YUFBTSxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUN6RCxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRO2dCQUM1QyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87YUFDdEIsQ0FBQyxDQUFDO1lBRUgsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNkLElBQUksQ0FBQyxPQUF3QixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkQ7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ3ZFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztnQkFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVE7Z0JBQzVDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTzthQUN0QixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDOzhHQXpEVSxvQkFBb0I7a0dBQXBCLG9CQUFvQjs7U0FBcEIsb0JBQW9COzJGQUFwQixvQkFBb0I7a0JBSGhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7aUJBQzFCOzJKQUV1QixJQUFJO3NCQUF6QixLQUFLO3VCQUFDLGFBQWE7Z0JBQ1UsUUFBUTtzQkFBckMsS0FBSzt1QkFBQyxxQkFBcUI7Z0JBQ0MsT0FBTztzQkFBbkMsS0FBSzt1QkFBQyxvQkFBb0I7Z0JBQ0MsTUFBTTtzQkFBakMsS0FBSzt1QkFBQyxtQkFBbUI7O0FBd0Q1QixNQUlhLGlCQUFpQjs4R0FBakIsaUJBQWlCOytHQUFqQixpQkFBaUIsaUJBaEVqQixvQkFBb0IsRUE2RE0sb0JBQW9CLGFBN0Q5QyxvQkFBb0I7K0dBZ0VwQixpQkFBaUI7O1NBQWpCLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQUo3QixRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLG9CQUFvQixFQUFFLG9CQUFvQixDQUFDO29CQUMxRCxPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztpQkFDaEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEluamVjdG9yLFxuICBJbnB1dCxcbiAgTmdNb2R1bGUsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRlbnQsIGlzQ29tcG9uZW50LCBpc1N0cmluZywgVmlld1JlZiB9IGZyb20gJy4uL3ZpZXdzL3R5cGVzJztcbmltcG9ydCB7IFZpZXdTZXJ2aWNlIH0gZnJvbSAnLi4vdmlld3Mvdmlldyc7XG5pbXBvcnQgeyBDb21wUmVmIH0gZnJvbSAnLi4vdmlld3MvY29tcC1yZWYnO1xuaW1wb3J0IHsgRHluYW1pY1ZpZXdDb21wb25lbnQgfSBmcm9tICcuL2R5bmFtaWMtdmlldy5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZHluYW1pY1ZpZXddJyxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY1ZpZXdEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQElucHV0KCdkeW5hbWljVmlldycpIHZpZXc6IENvbnRlbnQ7XG4gIEBJbnB1dCgnZHluYW1pY1ZpZXdJbmplY3RvcicpIGluamVjdG9yOiBJbmplY3RvcjtcbiAgQElucHV0KCdkeW5hbWljVmlld0NvbnRleHQnKSBjb250ZXh0OiBhbnk7XG4gIEBJbnB1dCgnZHluYW1pY1ZpZXdJbnB1dHMnKSBpbnB1dHM6IFJlY29yZDxhbnksIGFueT47XG5cbiAgcHJpdmF0ZSB2aWV3UmVmOiBWaWV3UmVmO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGVmYXVsdFRwbDogVGVtcGxhdGVSZWY8YW55PiwgcHJpdmF0ZSB2Y3I6IFZpZXdDb250YWluZXJSZWYsIHByaXZhdGUgdmlld1NlcnZpY2U6IFZpZXdTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucmVzb2x2ZUNvbnRlbnRUeXBlKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgY29uc3Qgdmlld0NoYW5nZWQgPSBjaGFuZ2VzLnZpZXcgJiYgIWNoYW5nZXMudmlldy5pc0ZpcnN0Q2hhbmdlKCk7XG4gICAgY29uc3QgY29udGV4dENoYW5nZWQgPSBjaGFuZ2VzLmNvbnRleHQgJiYgIWNoYW5nZXMuY29udGV4dC5pc0ZpcnN0Q2hhbmdlKCk7XG4gICAgY29uc3QgaW5wdXRzQ2hhbmdlZCA9IGNoYW5nZXMuaW5wdXRzICYmICFjaGFuZ2VzLmlucHV0cy5pc0ZpcnN0Q2hhbmdlKCk7XG5cbiAgICBpZiAodmlld0NoYW5nZWQpIHtcbiAgICAgIHRoaXMucmVzb2x2ZUNvbnRlbnRUeXBlKCk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0Q2hhbmdlZCkge1xuICAgICAgdGhpcy52aWV3UmVmLnVwZGF0ZUNvbnRleHQodGhpcy5jb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKGlzQ29tcG9uZW50KHRoaXMudmlldykgJiYgaW5wdXRzQ2hhbmdlZCkge1xuICAgICAgKHRoaXMudmlld1JlZiBhcyBDb21wUmVmPGFueT4pLnNldElucHV0cyh0aGlzLmlucHV0cyB8fCB7fSk7XG4gICAgfVxuICB9XG5cbiAgcmVzb2x2ZUNvbnRlbnRUeXBlKCkge1xuICAgIHRoaXMudmlld1JlZj8uZGVzdHJveSgpO1xuICAgIGlmIChpc1N0cmluZyh0aGlzLnZpZXcpKSB7XG4gICAgICB0aGlzLnZpZXdSZWYgPSB0aGlzLnZpZXdTZXJ2aWNlLmNyZWF0ZUNvbXBvbmVudChEeW5hbWljVmlld0NvbXBvbmVudCwge1xuICAgICAgICB2Y3I6IHRoaXMudmNyLFxuICAgICAgICBpbmplY3RvcjogdGhpcy5pbmplY3RvcixcbiAgICAgIH0pO1xuICAgICAgKHRoaXMudmlld1JlZiBhcyBDb21wUmVmPER5bmFtaWNWaWV3Q29tcG9uZW50Pikuc2V0SW5wdXQoJ2NvbnRlbnQnLCB0aGlzLnZpZXcpLmRldGVjdENoYW5nZXMoKTtcbiAgICB9IGVsc2UgaWYgKGlzQ29tcG9uZW50KHRoaXMudmlldykpIHtcbiAgICAgIHRoaXMudmlld1JlZiA9IHRoaXMudmlld1NlcnZpY2UuY3JlYXRlQ29tcG9uZW50KHRoaXMudmlldywge1xuICAgICAgICB2Y3I6IHRoaXMudmNyLFxuICAgICAgICBpbmplY3RvcjogdGhpcy5pbmplY3RvciA/PyB0aGlzLnZjci5pbmplY3RvcixcbiAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLmlucHV0cykge1xuICAgICAgICAodGhpcy52aWV3UmVmIGFzIENvbXBSZWY8YW55Pikuc2V0SW5wdXRzKHRoaXMuaW5wdXRzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52aWV3UmVmID0gdGhpcy52aWV3U2VydmljZS5jcmVhdGVWaWV3KHRoaXMudmlldyB8fCB0aGlzLmRlZmF1bHRUcGwsIHtcbiAgICAgICAgdmNyOiB0aGlzLnZjcixcbiAgICAgICAgaW5qZWN0b3I6IHRoaXMuaW5qZWN0b3IgPz8gdGhpcy52Y3IuaW5qZWN0b3IsXG4gICAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMudmlld1JlZj8uZGVzdHJveSgpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0R5bmFtaWNWaWV3RGlyZWN0aXZlLCBEeW5hbWljVmlld0NvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtEeW5hbWljVmlld0RpcmVjdGl2ZV0sXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNWaWV3TW9kdWxlIHt9XG4iXX0=